---DESCRIPTION---
The package enclosed consists of a front end, backend, and database that comprises an application for observing the expected demand for Citibike stations in New York City and the best path for reallocation to take for the top 10 most used stations. In addition, there are multiple other enclosed, standalone pieces that comprised some of the data cleaning, aggregation, and model selection activities that helped to create the application usable by users. All bicycle usage data used by this project can be acquired through Citibike at their online repository (https://s3.amazonaws.com/tripdata/index.html) and all weather data was sourced from NOAA (https://www.ncdc.noaa.gov/cdo-web/datasets). The code used to clean and aggregate the bike data is located in the dataCleaning folder, as well as a sample of the cleaned files. The model creation and evaluation code is located in the modelCreation folder.

The front end consists of a simple webpage that visualizes the 4 boroughs of New York with Citibike Stations (The Bronx, Brooklyn, Manhattan, and Queens) and offers input for users to select certain values for the 7 parameters our model was trained on - Hour of Day, Average Wind Speed, Precipitation Amount, Snow Total, Max Temperature, Month of Year, If the date is a Saturday, and If the date is a Sunday. Entry of these values and clicking "Submit" initiates a call to the backend, which will populate the map with the projected top 10 most demanded stations, and the order of reallocation of bicycles to those stations, with the path to those 10 stations. 

The backend application is a Python Flask app that serves data to the frontend upon request. When the user presses submit, the frontend makes a request to a REST endpoint with query parameters that represent their selections on the input variables to use for demand. The backend will strip those query arguments and then iterate across the entire known group of stations in the Citibike network, using the demand model to calculate what the projected demand of rides at any particular station is. Once the demand for all stations is calculated, the backend routes the 10 stations with the top demand to the Neo4J database. The Neo4J database, using a Cypher query, is then able to effectively create an ordering of which stations to visit first to redistribute bicycles to replenish and provide more rides. Once the backend has the output of the Cypher query, it returns the order to reallocate bicycles to the front end.

---INSTALLATION---
This installation assumes the user is utilizing the cloud-hosted Neo4J DB. If the user would prefer to instantiate a local version, instructions are below the execution section. The default and assumed approach is use of the cloud-hosted Neo4J.

This installation assumes the user is on a Linux environment and has installed Python 3.7.X and has some version of pip installed. The user should create a virtual environment and install the requirements for this project by using the following commands:
python -m venv cse6242
. cse6242/bin/activate
pip install -r requirements.txt

Once the environment is set up, the user should open two terminal windows and type the following commands into the separate windows while in the top level directory:
python app.py
python -m http.server 8080

Once the backend has started and a webserver has initialized, the user can navigate to http://localhost:8080/project.html and use the front end by inputting values for the model and observing the changes on the graph.

---EXECUTION---
The user is able to interact with the model through manipulation of the various fields on the front end application. The user can utilize the drop downs and radio buttons for certain questions, and for text box fields, the user is expected to input float values - such as .2, 1.4, or 123.384. Once the user has entered all of the values for their expected prediction, the user should press "Submit", at which point the front end will submit a request to the backend to return the best route between the 10 stations with the most demand, and the front end will display the route of reallocation for those 10 stations. This request can take up to 45 seconds, as first the model must project demand and then the Neo4j database must calculate the most efficient route. Once the stations and route are displayed, the user can view them on the map. Each station and link between stations, representing a trip between two stations for reallocation purposes, has a hover feature which will show information on the stations and order. Once the user has observed one set of input, they can change and alter the inputs to any other grouping in order to project what those top ten stations are, and observe what the recommended order of reallocation is for them. 


---OPTIONAL Neo4j LOCAL---
By default the project connects to a cloud hosted Neo4J DB.  However, it is possible to create a local version which will function exactly the same.

Install Neo4J Desktop + graph data science package, installer can be downloaded from : https://neo4j.com/download/.  Once installed follow quick start guide on creating a new graph database from: https://neo4j.com/developer/neo4j-desktop/.   Once the new graphDB has been setup, copy stations2.csv to the DB import directory.  It is normally under C:\Users\<userid>\.Neo4jDesktop\relate-data\dbmss\<dbid>\import.  Open neo4j browser and run the cypher queries in the file: neo4jDBCreation.txt.   Next comment out line 8 of data_processing.py and uncomment line 7.  This is the connection string needed for a local hosted graphDB.  Replace <password> on line 7 with the password you gave the graphDB upon creation.  